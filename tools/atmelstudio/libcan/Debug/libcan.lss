
libcan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000520  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  00800100  00800100  00000594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006db  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ce  00000000  00000000  0000314e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c1       	rjmp	.+734    	; 0x328 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e2       	ldi	r30, 0x20	; 32
  a8:	f5 e0       	ldi	r31, 0x05	; 5
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 3e       	cpi	r26, 0xE7	; 231
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	27 d2       	rcall	.+1102   	; 0x51a <main>
  cc:	27 c2       	rjmp	.+1102   	; 0x51c <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			tx_msgbuf.write_pos = 0;
		}
	}
	
	CANPAGE = cp_tmp;
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	22 e0       	ldi	r18, 0x02	; 2
  e4:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	24 e0       	ldi	r18, 0x04	; 4
  ea:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	23 e1       	ldi	r18, 0x13	; 19
  f0:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	2f e7       	ldi	r18, 0x7F	; 127
  f6:	20 93 df 00 	sts	0x00DF, r18	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	20 eb       	ldi	r18, 0xB0	; 176
 102:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	5f ef       	ldi	r21, 0xFF	; 255
 112:	ba 01       	movw	r22, r20
 114:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 118:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 11c:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 120:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	aa 1f       	adc	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 144:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 148:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 14c:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 156:	0d ee       	ldi	r16, 0xED	; 237
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	2e ee       	ldi	r18, 0xEE	; 238
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	c4 ef       	ldi	r28, 0xF4	; 244
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	a0 ef       	ldi	r26, 0xF0	; 240
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	0f 2e       	mov	r0, r31
 168:	ff ee       	ldi	r31, 0xEF	; 239
 16a:	ef 2e       	mov	r14, r31
 16c:	f1 2c       	mov	r15, r1
 16e:	f0 2d       	mov	r31, r0
 170:	f8 01       	movw	r30, r16
 172:	80 83       	st	Z, r24
 174:	f9 01       	movw	r30, r18
 176:	10 82       	st	Z, r1
 178:	48 83       	st	Y, r20
 17a:	59 83       	std	Y+1, r21	; 0x01
 17c:	6a 83       	std	Y+2, r22	; 0x02
 17e:	7b 83       	std	Y+3, r23	; 0x03
 180:	1d 92       	st	X+, r1
 182:	1d 92       	st	X+, r1
 184:	1d 92       	st	X+, r1
 186:	1c 92       	st	X, r1
 188:	13 97       	sbiw	r26, 0x03	; 3
 18a:	f7 01       	movw	r30, r14
 18c:	10 82       	st	Z, r1
 18e:	80 5f       	subi	r24, 0xF0	; 240
 190:	80 3f       	cpi	r24, 0xF0	; 240
 192:	71 f7       	brne	.-36     	; 0x170 <can_init+0xa0>
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	08 95       	ret

000001a8 <can_filter>:
 1a8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ac:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <rx_msgbuf+0x2>
 1b0:	2e 30       	cpi	r18, 0x0E	; 14
 1b2:	98 f5       	brcc	.+102    	; 0x21a <can_filter+0x72>
 1b4:	aa e4       	ldi	r26, 0x4A	; 74
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ec 91       	ld	r30, X
 1bc:	12 97       	sbiw	r26, 0x02	; 2
 1be:	2b e0       	ldi	r18, 0x0B	; 11
 1c0:	e2 9f       	mul	r30, r18
 1c2:	f0 01       	movw	r30, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	e6 5b       	subi	r30, 0xB6	; 182
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	94 83       	std	Z+4, r25	; 0x04
 1cc:	83 83       	std	Z+3, r24	; 0x03
 1ce:	12 96       	adiw	r26, 0x02	; 2
 1d0:	2c 91       	ld	r18, X
 1d2:	12 97       	sbiw	r26, 0x02	; 2
 1d4:	2f 5f       	subi	r18, 0xFF	; 255
 1d6:	12 96       	adiw	r26, 0x02	; 2
 1d8:	2c 93       	st	X, r18
 1da:	12 97       	sbiw	r26, 0x02	; 2
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	2c 91       	ld	r18, X
 1e0:	22 95       	swap	r18
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 208:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 20c:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 210:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 214:	80 e9       	ldi	r24, 0x90	; 144
 216:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 21a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 21e:	08 95       	ret

00000220 <can_message_available>:
 220:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <rx_msgbuf>
 224:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <rx_msgbuf+0x1>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	23 2b       	or	r18, r19
 22c:	09 f4       	brne	.+2      	; 0x230 <can_message_available+0x10>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret

00000232 <can_receive>:
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <rx_msgbuf+0x2>
 24e:	22 23       	and	r18, r18
 250:	09 f4       	brne	.+2      	; 0x254 <can_receive+0x22>
 252:	5d c0       	rjmp	.+186    	; 0x30e <can_receive+0xdc>
 254:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <rx_msgbuf>
 258:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <rx_msgbuf+0x1>
 25c:	20 fd       	sbrc	r18, 0
 25e:	0e c0       	rjmp	.+28     	; 0x27c <can_receive+0x4a>
 260:	a0 e0       	ldi	r26, 0x00	; 0
 262:	01 e0       	ldi	r16, 0x01	; 1
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	ea e4       	ldi	r30, 0x4A	; 74
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	4a c0       	rjmp	.+148    	; 0x300 <can_receive+0xce>
 26c:	20 81       	ld	r18, Z
 26e:	31 81       	ldd	r19, Z+1	; 0x01
 270:	20 23       	and	r18, r16
 272:	31 23       	and	r19, r17
 274:	23 2b       	or	r18, r19
 276:	09 f4       	brne	.+2      	; 0x27a <can_receive+0x48>
 278:	43 c0       	rjmp	.+134    	; 0x300 <can_receive+0xce>
 27a:	03 c0       	rjmp	.+6      	; 0x282 <can_receive+0x50>
 27c:	a0 e0       	ldi	r26, 0x00	; 0
 27e:	01 e0       	ldi	r16, 0x01	; 1
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	0f 2e       	mov	r0, r31
 284:	fa e4       	ldi	r31, 0x4A	; 74
 286:	ef 2e       	mov	r14, r31
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	68 01       	movw	r12, r16
 290:	c0 94       	com	r12
 292:	d0 94       	com	r13
 294:	2b e0       	ldi	r18, 0x0B	; 11
 296:	a2 9f       	mul	r26, r18
 298:	d0 01       	movw	r26, r0
 29a:	11 24       	eor	r1, r1
 29c:	a6 5b       	subi	r26, 0xB6	; 182
 29e:	be 4f       	sbci	r27, 0xFE	; 254
 2a0:	5d 01       	movw	r10, r26
 2a2:	e3 e0       	ldi	r30, 0x03	; 3
 2a4:	ae 0e       	add	r10, r30
 2a6:	b1 1c       	adc	r11, r1
 2a8:	ed 01       	movw	r28, r26
 2aa:	25 96       	adiw	r28, 0x05	; 5
 2ac:	f7 01       	movw	r30, r14
 2ae:	20 81       	ld	r18, Z
 2b0:	31 81       	ldd	r19, Z+1	; 0x01
 2b2:	2c 21       	and	r18, r12
 2b4:	3d 21       	and	r19, r13
 2b6:	31 83       	std	Z+1, r19	; 0x01
 2b8:	20 83       	st	Z, r18
 2ba:	f5 01       	movw	r30, r10
 2bc:	20 81       	ld	r18, Z
 2be:	31 81       	ldd	r19, Z+1	; 0x01
 2c0:	fc 01       	movw	r30, r24
 2c2:	31 83       	std	Z+1, r19	; 0x01
 2c4:	20 83       	st	Z, r18
 2c6:	28 81       	ld	r18, Y
 2c8:	fa 01       	movw	r30, r20
 2ca:	20 83       	st	Z, r18
 2cc:	28 81       	ld	r18, Y
 2ce:	22 23       	and	r18, r18
 2d0:	79 f0       	breq	.+30     	; 0x2f0 <can_receive+0xbe>
 2d2:	91 2c       	mov	r9, r1
 2d4:	29 2d       	mov	r18, r9
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	fd 01       	movw	r30, r26
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	86 80       	ldd	r8, Z+6	; 0x06
 2e0:	26 0f       	add	r18, r22
 2e2:	37 1f       	adc	r19, r23
 2e4:	f9 01       	movw	r30, r18
 2e6:	80 82       	st	Z, r8
 2e8:	93 94       	inc	r9
 2ea:	28 81       	ld	r18, Y
 2ec:	92 16       	cp	r9, r18
 2ee:	90 f3       	brcs	.-28     	; 0x2d4 <can_receive+0xa2>
 2f0:	f7 01       	movw	r30, r14
 2f2:	20 81       	ld	r18, Z
 2f4:	31 81       	ldd	r19, Z+1	; 0x01
 2f6:	20 23       	and	r18, r16
 2f8:	31 23       	and	r19, r17
 2fa:	23 2b       	or	r18, r19
 2fc:	b9 f6       	brne	.-82     	; 0x2ac <can_receive+0x7a>
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <can_receive+0xdc>
 300:	00 0f       	add	r16, r16
 302:	11 1f       	adc	r17, r17
 304:	af 5f       	subi	r26, 0xFF	; 255
 306:	22 81       	ldd	r18, Z+2	; 0x02
 308:	a2 17       	cp	r26, r18
 30a:	08 f4       	brcc	.+2      	; 0x30e <can_receive+0xdc>
 30c:	af cf       	rjmp	.-162    	; 0x26c <can_receive+0x3a>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	af 90       	pop	r10
 322:	9f 90       	pop	r9
 324:	8f 90       	pop	r8
 326:	08 95       	ret

00000328 <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

#if defined CANIT_vect
ISR(CANIT_vect) {
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	0b b6       	in	r0, 0x3b	; 59
 334:	0f 92       	push	r0
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
#elif defined CAN_INT_vect
ISR(CAN_INT_vect) {
#endif
	const uint8_t cp_tmp = CANPAGE;
 350:	ed ee       	ldi	r30, 0xED	; 237
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	40 81       	ld	r20, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 356:	10 82       	st	Z, r1
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
 358:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 35c:	86 ff       	sbrs	r24, 6
 35e:	43 c0       	rjmp	.+134    	; 0x3e6 <__vector_18+0xbe>
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	91 81       	ldd	r25, Z+1	; 0x01
 366:	80 81       	ld	r24, Z
 368:	98 17       	cp	r25, r24
 36a:	e9 f1       	breq	.+122    	; 0x3e6 <__vector_18+0xbe>
		bufi = tx_msgbuf.read_pos;
 36c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <__data_end+0x1>
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	fb 01       	movw	r30, r22
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e6 0f       	add	r30, r22
 382:	f7 1f       	adc	r31, r23
 384:	e0 50       	subi	r30, 0x00	; 0
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	88 23       	and	r24, r24
 38c:	79 f0       	breq	.+30     	; 0x3ac <__vector_18+0x84>
 38e:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 390:	9f 01       	movw	r18, r30
 392:	ca ef       	ldi	r28, 0xFA	; 250
 394:	d0 e0       	ldi	r29, 0x00	; 0

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 396:	df 01       	movw	r26, r30
 398:	12 96       	adiw	r26, 0x02	; 2
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 39a:	f9 01       	movw	r30, r18
 39c:	e8 0f       	add	r30, r24
 39e:	f1 1d       	adc	r31, r1
 3a0:	93 81       	ldd	r25, Z+3	; 0x03
 3a2:	98 83       	st	Y, r25

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	9c 91       	ld	r25, X
 3a8:	89 17       	cp	r24, r25
 3aa:	b8 f3       	brcs	.-18     	; 0x39a <__vector_18+0x72>
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
		}
#if defined CAN_REV_2A
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[bufi].msg_size;
#elif defined CAN_REV_2B
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[bufi].msg_size;
 3ac:	fb 01       	movw	r30, r22
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	6e 0f       	add	r22, r30
 3bc:	7f 1f       	adc	r23, r31
 3be:	fb 01       	movw	r30, r22
 3c0:	e0 50       	subi	r30, 0x00	; 0
 3c2:	ff 4f       	sbci	r31, 0xFF	; 255
 3c4:	82 81       	ldd	r24, Z+2	; 0x02
 3c6:	80 65       	ori	r24, 0x50	; 80
 3c8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (tx_msgbuf.read_pos < CAN_TX_MSGBUF_SIZE-1) {
 3cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_end+0x1>
 3d0:	87 30       	cpi	r24, 0x07	; 7
 3d2:	30 f4       	brcc	.+12     	; 0x3e0 <__vector_18+0xb8>
			tx_msgbuf.read_pos++;
 3d4:	e0 e0       	ldi	r30, 0x00	; 0
 3d6:	f1 e0       	ldi	r31, 0x01	; 1
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	81 83       	std	Z+1, r24	; 0x01
 3de:	61 c0       	rjmp	.+194    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		} else {
			tx_msgbuf.read_pos = 0;
 3e0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 3e4:	5e c0       	rjmp	.+188    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 3e6:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <rx_msgbuf+0x2>
 3ea:	92 95       	swap	r25
 3ec:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 3ee:	90 31       	cpi	r25, 0x10	; 16
 3f0:	08 f4       	brcc	.+2      	; 0x3f4 <__vector_18+0xcc>
 3f2:	57 c0       	rjmp	.+174    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			CANPAGE = cp;
 3f4:	80 e1       	ldi	r24, 0x10	; 16
 3f6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 3fa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 3fe:	85 fd       	sbrc	r24, 5
 400:	0b c0       	rjmp	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 404:	cd ee       	ldi	r28, 0xED	; 237
 406:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 408:	ae ee       	ldi	r26, 0xEE	; 238
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	46 c0       	rjmp	.+140    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 40e:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 410:	8c 91       	ld	r24, X
 412:	85 ff       	sbrs	r24, 5
 414:	42 c0       	rjmp	.+132    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 418:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 41a:	aa e4       	ldi	r26, 0x4A	; 74
 41c:	b1 e0       	ldi	r27, 0x01	; 1
 41e:	2d 91       	ld	r18, X+
 420:	3c 91       	ld	r19, X
 422:	11 97       	sbiw	r26, 0x01	; 1
 424:	e2 95       	swap	r30
 426:	ef 70       	andi	r30, 0x0F	; 15
 428:	e1 50       	subi	r30, 0x01	; 1
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 2e       	mov	r0, r30
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	82 2b       	or	r24, r18
 43c:	93 2b       	or	r25, r19
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	9c 93       	st	X, r25
 442:	8e 93       	st	-X, r24
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
 444:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 448:	8f 70       	andi	r24, 0x0F	; 15
 44a:	6e 2f       	mov	r22, r30
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	9b e0       	ldi	r25, 0x0B	; 11
 450:	e9 9f       	mul	r30, r25
 452:	f0 01       	movw	r30, r0
 454:	11 24       	eor	r1, r1
 456:	e6 5b       	subi	r30, 0xB6	; 182
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 45c:	85 81       	ldd	r24, Z+5	; 0x05
 45e:	88 23       	and	r24, r24
 460:	b1 f0       	breq	.+44     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 462:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 464:	ca ef       	ldi	r28, 0xFA	; 250
 466:	d0 e0       	ldi	r29, 0x00	; 0
 468:	9b e0       	ldi	r25, 0x0B	; 11
 46a:	96 9f       	mul	r25, r22
 46c:	90 01       	movw	r18, r0
 46e:	97 9f       	mul	r25, r23
 470:	30 0d       	add	r19, r0
 472:	11 24       	eor	r1, r1
 474:	26 5b       	subi	r18, 0xB6	; 182
 476:	3e 4f       	sbci	r19, 0xFE	; 254
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 478:	d9 01       	movw	r26, r18
 47a:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 47c:	98 81       	ld	r25, Y
 47e:	f9 01       	movw	r30, r18
 480:	e8 0f       	add	r30, r24
 482:	f1 1d       	adc	r31, r1
 484:	96 83       	std	Z+6, r25	; 0x06
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	9c 91       	ld	r25, X
 48a:	89 17       	cp	r24, r25
 48c:	b8 f3       	brcs	.-18     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 48e:	ef ee       	ldi	r30, 0xEF	; 239
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 83       	st	Z, r24
				break;
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 49a:	e0 5f       	subi	r30, 0xF0	; 240
 49c:	9e 17       	cp	r25, r30
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	b6 cf       	rjmp	.-148    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 4a2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 4a6:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0b be       	out	0x3b, r0	; 59
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <can_test_rx>:

	while(1);
	return 0;
}

int can_test_rx(void) {
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	2b 97       	sbiw	r28, 0x0b	; 11
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
	
	can_init(0);
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	f2 dd       	rcall	.-1052   	; 0xd0 <can_init>
	can_filter(8);
 4ec:	88 e0       	ldi	r24, 0x08	; 8
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	5b de       	rcall	.-842    	; 0x1a8 <can_filter>
	sei();
 4f2:	78 94       	sei

	DDRC = 0xFF;
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 4f8:	18 b8       	out	0x08, r1	; 8
 4fa:	0b c0       	rjmp	.+22     	; 0x512 <can_test_rx+0x40>
	uint8_t dat[8];
	uint8_t len;
	
	while(1) {
		while(can_message_available()) {
			can_receive(&id, dat, &len);
 4fc:	ae 01       	movw	r20, r28
 4fe:	45 5f       	subi	r20, 0xF5	; 245
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	be 01       	movw	r22, r28
 504:	6d 5f       	subi	r22, 0xFD	; 253
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	92 de       	rcall	.-732    	; 0x232 <can_receive>
			PORTC = dat[0];
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	88 b9       	out	0x08, r24	; 8
	uint16_t id;
	uint8_t dat[8];
	uint8_t len;
	
	while(1) {
		while(can_message_available()) {
 512:	86 de       	rcall	.-756    	; 0x220 <can_message_available>
 514:	81 11       	cpse	r24, r1
 516:	f2 cf       	rjmp	.-28     	; 0x4fc <can_test_rx+0x2a>
 518:	fc cf       	rjmp	.-8      	; 0x512 <can_test_rx+0x40>

0000051a <main>:
 51a:	db df       	rcall	.-74     	; 0x4d2 <can_test_rx>

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
