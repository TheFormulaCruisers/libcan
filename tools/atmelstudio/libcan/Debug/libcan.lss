
libcan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000049a  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  0080010c  0080010c  0000053a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001004  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc1  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000700  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000028ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000663  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000703  00000000  00000000  000030f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000037f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	f2 c0       	rjmp	.+484    	; 0x22e <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e9       	ldi	r30, 0x9A	; 154
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 30       	cpi	r26, 0x0C	; 12
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	ac e0       	ldi	r26, 0x0C	; 12
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 30       	cpi	r26, 0x03	; 3
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	e4 d1       	rcall	.+968    	; 0x494 <main>
  cc:	e4 c1       	rjmp	.+968    	; 0x496 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			} while (rx_msgbuf.rx_flags & flag_msk);
			break;
		}
		flag_msk <<= 1;
	}
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	83 e1       	ldi	r24, 0x13	; 19
  f0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	8f e7       	ldi	r24, 0x7F	; 127
  f6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	80 eb       	ldi	r24, 0xB0	; 176
 102:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0d ee       	ldi	r16, 0xED	; 237
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	2e ee       	ldi	r18, 0xEE	; 238
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	c4 ef       	ldi	r28, 0xF4	; 244
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	4f ef       	ldi	r20, 0xFF	; 255
 116:	5f ef       	ldi	r21, 0xFF	; 255
 118:	ba 01       	movw	r22, r20
 11a:	a0 ef       	ldi	r26, 0xF0	; 240
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	0f 2e       	mov	r0, r31
 120:	ff ee       	ldi	r31, 0xEF	; 239
 122:	ef 2e       	mov	r14, r31
 124:	f1 2c       	mov	r15, r1
 126:	f0 2d       	mov	r31, r0
 128:	f8 01       	movw	r30, r16
 12a:	80 83       	st	Z, r24
 12c:	f9 01       	movw	r30, r18
 12e:	10 82       	st	Z, r1
 130:	48 83       	st	Y, r20
 132:	59 83       	std	Y+1, r21	; 0x01
 134:	6a 83       	std	Y+2, r22	; 0x02
 136:	7b 83       	std	Y+3, r23	; 0x03
 138:	1d 92       	st	X+, r1
 13a:	1d 92       	st	X+, r1
 13c:	1d 92       	st	X+, r1
 13e:	1c 92       	st	X, r1
 140:	13 97       	sbiw	r26, 0x03	; 3
 142:	f7 01       	movw	r30, r14
 144:	10 82       	st	Z, r1
 146:	80 5f       	subi	r24, 0xF0	; 240
 148:	80 3f       	cpi	r24, 0xF0	; 240
 14a:	71 f7       	brne	.-36     	; 0x128 <can_init+0x58>
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <can_transmit>:

void can_transmit(uint16_t txid, uint8_t *msg, uint8_t msg_size) {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
	const uint8_t cp_tmp = CANPAGE;
 166:	ed ee       	ldi	r30, 0xED	; 237
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	50 81       	ld	r21, Z
	uint8_t bufi, msgi;

	CANPAGE = 0x00;
 16c:	10 82       	st	Z, r1
	
	// Write to mob if it's not busy and start transmission
	if (!(CANEN2 & _BV(ENMOB0))) {
 16e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 172:	80 fd       	sbrc	r24, 0
 174:	2c c0       	rjmp	.+88     	; 0x1ce <can_transmit+0x6e>
		for (msgi = 0; msgi < msg_size; msgi++) {
 176:	44 23       	and	r20, r20
 178:	79 f0       	breq	.+30     	; 0x198 <can_transmit+0x38>
 17a:	fb 01       	movw	r30, r22
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	24 0f       	add	r18, r20
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	62 0f       	add	r22, r18
 188:	73 1f       	adc	r23, r19
			CANMSG = *(msg+msgi);
 18a:	aa ef       	ldi	r26, 0xFA	; 250
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	91 91       	ld	r25, Z+
 190:	9c 93       	st	X, r25

	CANPAGE = 0x00;
	
	// Write to mob if it's not busy and start transmission
	if (!(CANEN2 & _BV(ENMOB0))) {
		for (msgi = 0; msgi < msg_size; msgi++) {
 192:	6e 17       	cp	r22, r30
 194:	7f 07       	cpc	r23, r31
 196:	d9 f7       	brne	.-10     	; 0x18e <can_transmit+0x2e>
		}
#if defined CAN_REV_2A
		CANIDT = _ID_TO_IDT_2A(txid);
		CANCDMOB = _BV(CONMOB0) | msg_size;
#elif defined CAN_REV_2B
		CANIDT = _ID_TO_IDT_2B(txid);
 198:	ce 01       	movw	r24, r28
 19a:	a0 e0       	ldi	r26, 0x00	; 0
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	aa 1f       	adc	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	aa 1f       	adc	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1ba:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1be:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1c2:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | msg_size;
 1c6:	40 65       	ori	r20, 0x50	; 80
 1c8:	40 93 ef 00 	sts	0x00EF, r20	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1cc:	2b c0       	rjmp	.+86     	; 0x224 <can_transmit+0xc4>
#endif

	// Write to tx message buffer otherwise
	} else {
		bufi = tx_msgbuf.write_pos;
 1ce:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__data_end>
		tx_msgbuf.msgs[bufi].id = txid;
 1d2:	a3 2f       	mov	r26, r19
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	8b e0       	ldi	r24, 0x0B	; 11
 1d8:	38 9f       	mul	r19, r24
 1da:	f0 01       	movw	r30, r0
 1dc:	11 24       	eor	r1, r1
 1de:	e4 5f       	subi	r30, 0xF4	; 244
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	d3 83       	std	Z+3, r29	; 0x03
 1e4:	c2 83       	std	Z+2, r28	; 0x02
		tx_msgbuf.msgs[bufi].size = msg_size;
 1e6:	44 83       	std	Z+4, r20	; 0x04
		for (msgi = 0; msgi < msg_size; msgi++) {
 1e8:	44 23       	and	r20, r20
 1ea:	a1 f0       	breq	.+40     	; 0x214 <can_transmit+0xb4>
 1ec:	fb 01       	movw	r30, r22
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
			tx_msgbuf.msgs[bufi].msg[msgi] = *(msg+msgi);
 1f2:	2b e0       	ldi	r18, 0x0B	; 11
 1f4:	2a 9f       	mul	r18, r26
 1f6:	b0 01       	movw	r22, r0
 1f8:	2b 9f       	mul	r18, r27
 1fa:	70 0d       	add	r23, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	64 5f       	subi	r22, 0xF4	; 244
 200:	7e 4f       	sbci	r23, 0xFE	; 254
 202:	21 91       	ld	r18, Z+
 204:	db 01       	movw	r26, r22
 206:	a8 0f       	add	r26, r24
 208:	b9 1f       	adc	r27, r25
 20a:	15 96       	adiw	r26, 0x05	; 5
 20c:	2c 93       	st	X, r18
 20e:	01 96       	adiw	r24, 0x01	; 1
	// Write to tx message buffer otherwise
	} else {
		bufi = tx_msgbuf.write_pos;
		tx_msgbuf.msgs[bufi].id = txid;
		tx_msgbuf.msgs[bufi].size = msg_size;
		for (msgi = 0; msgi < msg_size; msgi++) {
 210:	84 17       	cp	r24, r20
 212:	b8 f3       	brcs	.-18     	; 0x202 <can_transmit+0xa2>
			tx_msgbuf.msgs[bufi].msg[msgi] = *(msg+msgi);
		}
		if (bufi < CAN_TX_MSGBUF_SIZE-1) {
 214:	37 30       	cpi	r19, 0x07	; 7
 216:	20 f4       	brcc	.+8      	; 0x220 <can_transmit+0xc0>
			tx_msgbuf.write_pos = bufi + 1;
 218:	3f 5f       	subi	r19, 0xFF	; 255
 21a:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <__data_end>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <can_transmit+0xc4>
		} else {
			tx_msgbuf.write_pos = 0;
 220:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
	
	CANPAGE = cp_tmp;
 224:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

#if defined CANIT_vect
ISR(CANIT_vect) {
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	0b b6       	in	r0, 0x3b	; 59
 23a:	0f 92       	push	r0
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
#elif defined CAN_INT_vect
ISR(CAN_INT_vect) {
#endif
	const uint8_t cp_tmp = CANPAGE;
 258:	ed ee       	ldi	r30, 0xED	; 237
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	40 81       	ld	r20, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 25e:	10 82       	st	Z, r1
	bufi = tx_msgbuf.read_pos;
 260:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__data_end+0x1>
	if (CANSTMOB & _BV(TXOK) && bufi != tx_msgbuf.write_pos) {
 264:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 268:	86 ff       	sbrs	r24, 6
 26a:	53 c0       	rjmp	.+166    	; 0x312 <__vector_18+0xe4>
 26c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 270:	58 17       	cp	r21, r24
 272:	09 f4       	brne	.+2      	; 0x276 <__vector_18+0x48>
 274:	4e c0       	rjmp	.+156    	; 0x312 <__vector_18+0xe4>
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].size; msgi++) {
 276:	65 2f       	mov	r22, r21
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	2b e0       	ldi	r18, 0x0B	; 11
 27c:	52 9f       	mul	r21, r18
 27e:	f0 01       	movw	r30, r0
 280:	11 24       	eor	r1, r1
 282:	e4 5f       	subi	r30, 0xF4	; 244
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	84 81       	ldd	r24, Z+4	; 0x04
 288:	88 23       	and	r24, r24
 28a:	b1 f0       	breq	.+44     	; 0x2b8 <__vector_18+0x8a>
 28c:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 28e:	9b e0       	ldi	r25, 0x0B	; 11
 290:	96 9f       	mul	r25, r22
 292:	90 01       	movw	r18, r0
 294:	97 9f       	mul	r25, r23
 296:	30 0d       	add	r19, r0
 298:	11 24       	eor	r1, r1
 29a:	24 5f       	subi	r18, 0xF4	; 244
 29c:	3e 4f       	sbci	r19, 0xFE	; 254
 29e:	ca ef       	ldi	r28, 0xFA	; 250
 2a0:	d0 e0       	ldi	r29, 0x00	; 0

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	bufi = tx_msgbuf.read_pos;
	if (CANSTMOB & _BV(TXOK) && bufi != tx_msgbuf.write_pos) {
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].size; msgi++) {
 2a2:	d9 01       	movw	r26, r18
 2a4:	14 96       	adiw	r26, 0x04	; 4
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 2a6:	f9 01       	movw	r30, r18
 2a8:	e8 0f       	add	r30, r24
 2aa:	f1 1d       	adc	r31, r1
 2ac:	95 81       	ldd	r25, Z+5	; 0x05
 2ae:	98 83       	st	Y, r25

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	bufi = tx_msgbuf.read_pos;
	if (CANSTMOB & _BV(TXOK) && bufi != tx_msgbuf.write_pos) {
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].size; msgi++) {
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	9c 91       	ld	r25, X
 2b4:	89 17       	cp	r24, r25
 2b6:	b8 f3       	brcs	.-18     	; 0x2a6 <__vector_18+0x78>
		}
#if defined CAN_REV_2A
		CANIDT = _ID_TO_IDT_2A(tx_msgbuf.msgs[bufi].id);
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[bufi].size;
#elif defined CAN_REV_2B
		CANIDT = _ID_TO_IDT_2B(tx_msgbuf.msgs[bufi].id);
 2b8:	8b e0       	ldi	r24, 0x0B	; 11
 2ba:	86 9f       	mul	r24, r22
 2bc:	f0 01       	movw	r30, r0
 2be:	87 9f       	mul	r24, r23
 2c0:	f0 0d       	add	r31, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	e4 5f       	subi	r30, 0xF4	; 244
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	82 81       	ldd	r24, Z+2	; 0x02
 2ca:	93 81       	ldd	r25, Z+3	; 0x03
 2cc:	a0 e0       	ldi	r26, 0x00	; 0
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 2ec:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 2f0:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 2f4:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[bufi].size;
 2f8:	84 81       	ldd	r24, Z+4	; 0x04
 2fa:	80 65       	ori	r24, 0x50	; 80
 2fc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (bufi < CAN_TX_MSGBUF_SIZE-1) {
 300:	57 30       	cpi	r21, 0x07	; 7
 302:	20 f4       	brcc	.+8      	; 0x30c <__vector_18+0xde>
			tx_msgbuf.read_pos = bufi + 1;
 304:	5f 5f       	subi	r21, 0xFF	; 255
 306:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__data_end+0x1>
 30a:	73 c0       	rjmp	.+230    	; 0x3f2 <__vector_18+0x1c4>
		} else {
			tx_msgbuf.read_pos = 0;
 30c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 310:	70 c0       	rjmp	.+224    	; 0x3f2 <__vector_18+0x1c4>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 312:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_msgbuf+0x2>
 316:	92 95       	swap	r25
 318:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 31a:	90 31       	cpi	r25, 0x10	; 16
 31c:	08 f4       	brcc	.+2      	; 0x320 <__vector_18+0xf2>
 31e:	69 c0       	rjmp	.+210    	; 0x3f2 <__vector_18+0x1c4>
			CANPAGE = cp;
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 326:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 32a:	85 fd       	sbrc	r24, 5
 32c:	0b c0       	rjmp	.+22     	; 0x344 <__vector_18+0x116>
 32e:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 330:	cd ee       	ldi	r28, 0xED	; 237
 332:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 334:	ae ee       	ldi	r26, 0xEE	; 238
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	58 c0       	rjmp	.+176    	; 0x3ea <__vector_18+0x1bc>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 33a:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 33c:	8c 91       	ld	r24, X
 33e:	85 ff       	sbrs	r24, 5
 340:	54 c0       	rjmp	.+168    	; 0x3ea <__vector_18+0x1bc>
 342:	01 c0       	rjmp	.+2      	; 0x346 <__vector_18+0x118>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 344:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 346:	a6 e6       	ldi	r26, 0x66	; 102
 348:	b1 e0       	ldi	r27, 0x01	; 1
 34a:	2d 91       	ld	r18, X+
 34c:	3c 91       	ld	r19, X
 34e:	11 97       	sbiw	r26, 0x01	; 1
 350:	e2 95       	swap	r30
 352:	ef 70       	andi	r30, 0x0F	; 15
 354:	e1 50       	subi	r30, 0x01	; 1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 2e       	mov	r0, r30
 35c:	02 c0       	rjmp	.+4      	; 0x362 <__vector_18+0x134>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <__vector_18+0x130>
 366:	82 2b       	or	r24, r18
 368:	93 2b       	or	r25, r19
 36a:	11 96       	adiw	r26, 0x01	; 1
 36c:	9c 93       	st	X, r25
 36e:	8e 93       	st	-X, r24
#if defined CAN_REV_2A
				rx_msgbuf.msgs[bufi].id = _IDT_2A_TO_ID(CANIDT);
#elif defined CAN_REV_2B
				rx_msgbuf.msgs[bufi].id = _IDT_2B_TO_ID(CANIDT);
 370:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 374:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 378:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 37c:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 380:	68 94       	set
 382:	12 f8       	bld	r1, 2
 384:	b6 95       	lsr	r27
 386:	a7 95       	ror	r26
 388:	97 95       	ror	r25
 38a:	87 95       	ror	r24
 38c:	16 94       	lsr	r1
 38e:	d1 f7       	brne	.-12     	; 0x384 <__vector_18+0x156>
 390:	6e 2f       	mov	r22, r30
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	2b e0       	ldi	r18, 0x0B	; 11
 396:	e2 9f       	mul	r30, r18
 398:	f0 01       	movw	r30, r0
 39a:	11 24       	eor	r1, r1
 39c:	ea 59       	subi	r30, 0x9A	; 154
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	94 83       	std	Z+4, r25	; 0x04
 3a2:	83 83       	std	Z+3, r24	; 0x03
#endif
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
 3a4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 3a8:	8f 70       	andi	r24, 0x0F	; 15
 3aa:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 3ac:	85 81       	ldd	r24, Z+5	; 0x05
 3ae:	88 23       	and	r24, r24
 3b0:	b1 f0       	breq	.+44     	; 0x3de <__vector_18+0x1b0>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 3b4:	ca ef       	ldi	r28, 0xFA	; 250
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
 3b8:	9b e0       	ldi	r25, 0x0B	; 11
 3ba:	96 9f       	mul	r25, r22
 3bc:	90 01       	movw	r18, r0
 3be:	97 9f       	mul	r25, r23
 3c0:	30 0d       	add	r19, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	2a 59       	subi	r18, 0x9A	; 154
 3c6:	3e 4f       	sbci	r19, 0xFE	; 254
				rx_msgbuf.msgs[bufi].id = _IDT_2A_TO_ID(CANIDT);
#elif defined CAN_REV_2B
				rx_msgbuf.msgs[bufi].id = _IDT_2B_TO_ID(CANIDT);
#endif
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 3c8:	d9 01       	movw	r26, r18
 3ca:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 3cc:	98 81       	ld	r25, Y
 3ce:	f9 01       	movw	r30, r18
 3d0:	e8 0f       	add	r30, r24
 3d2:	f1 1d       	adc	r31, r1
 3d4:	96 83       	std	Z+6, r25	; 0x06
				rx_msgbuf.msgs[bufi].id = _IDT_2A_TO_ID(CANIDT);
#elif defined CAN_REV_2B
				rx_msgbuf.msgs[bufi].id = _IDT_2B_TO_ID(CANIDT);
#endif
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	9c 91       	ld	r25, X
 3da:	89 17       	cp	r24, r25
 3dc:	b8 f3       	brcs	.-18     	; 0x3cc <__vector_18+0x19e>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 3de:	ef ee       	ldi	r30, 0xEF	; 239
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	80 83       	st	Z, r24
				break;
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <__vector_18+0x1c4>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 3ea:	e0 5f       	subi	r30, 0xF0	; 240
 3ec:	9e 17       	cp	r25, r30
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <__vector_18+0x1c4>
 3f0:	a4 cf       	rjmp	.-184    	; 0x33a <__vector_18+0x10c>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 3f2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 3f6:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0b be       	out	0x3b, r0	; 59
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <can_test_tx>:
	uint16_t id;
	uint8_t dat[8];
	uint8_t len;
	
	while(1) {
		while(can_message_available()) {
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	2c 97       	sbiw	r28, 0x0c	; 12
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	4b de       	rcall	.-874    	; 0xd0 <can_init>
 43a:	78 94       	sei
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	f1 e0       	ldi	r31, 0x01	; 1
 442:	de 01       	movw	r26, r28
 444:	11 96       	adiw	r26, 0x01	; 1
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <can_test_tx+0x22>
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	87 b9       	out	0x07, r24	; 7
 452:	00 e0       	ldi	r16, 0x00	; 0
 454:	11 e0       	ldi	r17, 0x01	; 1
 456:	f1 2c       	mov	r15, r1
 458:	19 83       	std	Y+1, r17	; 0x01
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	be 01       	movw	r22, r28
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	7c de       	rcall	.-776    	; 0x160 <can_transmit>
 468:	80 ef       	ldi	r24, 0xF0	; 240
 46a:	99 e4       	ldi	r25, 0x49	; 73
 46c:	a2 e0       	ldi	r26, 0x02	; 2
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	a1 09       	sbc	r26, r1
 474:	b1 09       	sbc	r27, r1
 476:	e1 f7       	brne	.-8      	; 0x470 <can_test_tx+0x4c>
 478:	10 38       	cpi	r17, 0x80	; 128
 47a:	29 f0       	breq	.+10     	; 0x486 <can_test_tx+0x62>
 47c:	11 30       	cpi	r17, 0x01	; 1
 47e:	31 f0       	breq	.+12     	; 0x48c <can_test_tx+0x68>
 480:	00 23       	and	r16, r16
 482:	21 f0       	breq	.+8      	; 0x48c <can_test_tx+0x68>
 484:	01 c0       	rjmp	.+2      	; 0x488 <can_test_tx+0x64>
 486:	01 e0       	ldi	r16, 0x01	; 1
 488:	16 95       	lsr	r17
 48a:	02 c0       	rjmp	.+4      	; 0x490 <can_test_tx+0x6c>
 48c:	11 0f       	add	r17, r17
 48e:	0f 2d       	mov	r16, r15
 490:	18 b9       	out	0x08, r17	; 8
 492:	e2 cf       	rjmp	.-60     	; 0x458 <can_test_tx+0x34>

00000494 <main>:
	
	return 0;
}

int main(void) {
    can_test_tx();
 494:	c7 df       	rcall	.-114    	; 0x424 <can_test_tx>

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
