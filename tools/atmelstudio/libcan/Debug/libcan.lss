
libcan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  0080010c  0080010c  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fde  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d7  00000000  00000000  000021f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063d  00000000  00000000  000030ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000036f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	fb c0       	rjmp	.+502    	; 0x240 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ee ea       	ldi	r30, 0xAE	; 174
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 30       	cpi	r26, 0x0C	; 12
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	22 e0       	ldi	r18, 0x02	; 2
  bc:	ac e0       	ldi	r26, 0x0C	; 12
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 30       	cpi	r26, 0x03	; 3
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	ee d1       	rcall	.+988    	; 0x4a8 <main>
  cc:	ee c1       	rjmp	.+988    	; 0x4aa <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			} while (rx_msgbuf.rx_flags & flag_msk);
			break;
		}
		flag_msk <<= 1;
	}
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	83 e1       	ldi	r24, 0x13	; 19
  f0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	8f e7       	ldi	r24, 0x7F	; 127
  f6:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	80 eb       	ldi	r24, 0xB0	; 176
 102:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0d ee       	ldi	r16, 0xED	; 237
 10a:	10 e0       	ldi	r17, 0x00	; 0
 10c:	2e ee       	ldi	r18, 0xEE	; 238
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	c4 ef       	ldi	r28, 0xF4	; 244
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	4f ef       	ldi	r20, 0xFF	; 255
 116:	5f ef       	ldi	r21, 0xFF	; 255
 118:	ba 01       	movw	r22, r20
 11a:	a0 ef       	ldi	r26, 0xF0	; 240
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	0f 2e       	mov	r0, r31
 120:	ff ee       	ldi	r31, 0xEF	; 239
 122:	ef 2e       	mov	r14, r31
 124:	f1 2c       	mov	r15, r1
 126:	f0 2d       	mov	r31, r0
 128:	f8 01       	movw	r30, r16
 12a:	80 83       	st	Z, r24
 12c:	f9 01       	movw	r30, r18
 12e:	10 82       	st	Z, r1
 130:	48 83       	st	Y, r20
 132:	59 83       	std	Y+1, r21	; 0x01
 134:	6a 83       	std	Y+2, r22	; 0x02
 136:	7b 83       	std	Y+3, r23	; 0x03
 138:	1d 92       	st	X+, r1
 13a:	1d 92       	st	X+, r1
 13c:	1d 92       	st	X+, r1
 13e:	1c 92       	st	X, r1
 140:	13 97       	sbiw	r26, 0x03	; 3
 142:	f7 01       	movw	r30, r14
 144:	10 82       	st	Z, r1
 146:	80 5f       	subi	r24, 0xF0	; 240
 148:	80 3f       	cpi	r24, 0xF0	; 240
 14a:	71 f7       	brne	.-36     	; 0x128 <can_init+0x58>
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <can_transmit>:

void can_transmit(uint16_t txid, uint8_t *msg, uint8_t msg_size) {
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	9c 01       	movw	r18, r24
	const uint8_t cp_tmp = CANPAGE;
 168:	ed ee       	ldi	r30, 0xED	; 237
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	10 81       	ld	r17, Z
	uint8_t msgi;

	CANPAGE = 0x00;
 16e:	10 82       	st	Z, r1
	
	// Write to mob if it's not busy and start transmission
	if (!(CANEN2 & _BV(ENMOB0))) {
 170:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 174:	80 fd       	sbrc	r24, 0
 176:	2b c0       	rjmp	.+86     	; 0x1ce <can_transmit+0x6e>
		for (msgi = 0; msgi < msg_size; msgi++) {
 178:	44 23       	and	r20, r20
 17a:	71 f0       	breq	.+28     	; 0x198 <can_transmit+0x38>
 17c:	fb 01       	movw	r30, r22
 17e:	af ef       	ldi	r26, 0xFF	; 255
 180:	a4 0f       	add	r26, r20
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	6a 0f       	add	r22, r26
 188:	7b 1f       	adc	r23, r27
			CANMSG = *(msg+msgi);
 18a:	aa ef       	ldi	r26, 0xFA	; 250
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	91 91       	ld	r25, Z+
 190:	9c 93       	st	X, r25

	CANPAGE = 0x00;
	
	// Write to mob if it's not busy and start transmission
	if (!(CANEN2 & _BV(ENMOB0))) {
		for (msgi = 0; msgi < msg_size; msgi++) {
 192:	6e 17       	cp	r22, r30
 194:	7f 07       	cpc	r23, r31
 196:	d9 f7       	brne	.-10     	; 0x18e <can_transmit+0x2e>
		}
#if defined CAN_REV_2A
		CANIDT = _ID_TO_IDT_2A(txid);
		CANCDMOB = _BV(CONMOB0) | msg_size;
#elif defined CAN_REV_2B
		CANIDT = _ID_TO_IDT_2B(txid);
 198:	c9 01       	movw	r24, r18
 19a:	a0 e0       	ldi	r26, 0x00	; 0
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	aa 1f       	adc	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	aa 1f       	adc	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1ba:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1be:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1c2:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | msg_size;
 1c6:	40 65       	ori	r20, 0x50	; 80
 1c8:	40 93 ef 00 	sts	0x00EF, r20	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <can_transmit+0xd4>
#endif

	// Write to tx message buffer otherwise
	} else {
		tx_msgbuf.msgs[tx_msgbuf.write_pos].id = txid;
 1ce:	ac e0       	ldi	r26, 0x0C	; 12
 1d0:	b1 e0       	ldi	r27, 0x01	; 1
 1d2:	ec 91       	ld	r30, X
 1d4:	8b e0       	ldi	r24, 0x0B	; 11
 1d6:	8e 9f       	mul	r24, r30
 1d8:	f0 01       	movw	r30, r0
 1da:	11 24       	eor	r1, r1
 1dc:	e4 5f       	subi	r30, 0xF4	; 244
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	33 83       	std	Z+3, r19	; 0x03
 1e2:	22 83       	std	Z+2, r18	; 0x02
		tx_msgbuf.msgs[tx_msgbuf.write_pos].size = msg_size;
 1e4:	ec 91       	ld	r30, X
 1e6:	8e 9f       	mul	r24, r30
 1e8:	f0 01       	movw	r30, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	e4 5f       	subi	r30, 0xF4	; 244
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	44 83       	std	Z+4, r20	; 0x04
		for (msgi = 0; msgi < msg_size; msgi++) {
 1f2:	44 23       	and	r20, r20
 1f4:	99 f0       	breq	.+38     	; 0x21c <can_transmit+0xbc>
 1f6:	db 01       	movw	r26, r22
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
			tx_msgbuf.msgs[tx_msgbuf.write_pos].msg[msgi] = *(msg+msgi);
 1fc:	cc e0       	ldi	r28, 0x0C	; 12
 1fe:	d1 e0       	ldi	r29, 0x01	; 1
 200:	5b e0       	ldi	r21, 0x0B	; 11
 202:	38 81       	ld	r19, Y
 204:	2d 91       	ld	r18, X+
 206:	fc 01       	movw	r30, r24
 208:	53 9f       	mul	r21, r19
 20a:	e0 0d       	add	r30, r0
 20c:	f1 1d       	adc	r31, r1
 20e:	11 24       	eor	r1, r1
 210:	e4 5f       	subi	r30, 0xF4	; 244
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	25 83       	std	Z+5, r18	; 0x05
 216:	01 96       	adiw	r24, 0x01	; 1

	// Write to tx message buffer otherwise
	} else {
		tx_msgbuf.msgs[tx_msgbuf.write_pos].id = txid;
		tx_msgbuf.msgs[tx_msgbuf.write_pos].size = msg_size;
		for (msgi = 0; msgi < msg_size; msgi++) {
 218:	84 17       	cp	r24, r20
 21a:	98 f3       	brcs	.-26     	; 0x202 <can_transmit+0xa2>
			tx_msgbuf.msgs[tx_msgbuf.write_pos].msg[msgi] = *(msg+msgi);
		}
		if (tx_msgbuf.write_pos < CAN_TX_MSGBUF_SIZE-1) {
 21c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 220:	87 30       	cpi	r24, 0x07	; 7
 222:	30 f4       	brcc	.+12     	; 0x230 <can_transmit+0xd0>
			tx_msgbuf.write_pos++;
 224:	ec e0       	ldi	r30, 0x0C	; 12
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	80 81       	ld	r24, Z
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 83       	st	Z, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <can_transmit+0xd4>
		} else {
			tx_msgbuf.write_pos = 0;
 230:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
	
	CANPAGE = cp_tmp;
 234:	10 93 ed 00 	sts	0x00ED, r17	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

#if defined CANIT_vect
ISR(CANIT_vect) {
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	0b b6       	in	r0, 0x3b	; 59
 24c:	0f 92       	push	r0
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
#elif defined CAN_INT_vect
ISR(CAN_INT_vect) {
#endif
	const uint8_t cp_tmp = CANPAGE;
 26a:	ed ee       	ldi	r30, 0xED	; 237
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	20 81       	ld	r18, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 270:	10 82       	st	Z, r1
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
 272:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 276:	86 ff       	sbrs	r24, 6
 278:	68 c0       	rjmp	.+208    	; 0x34a <__vector_18+0x10a>
 27a:	ec e0       	ldi	r30, 0x0C	; 12
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	91 81       	ldd	r25, Z+1	; 0x01
 280:	80 81       	ld	r24, Z
 282:	98 17       	cp	r25, r24
 284:	09 f4       	brne	.+2      	; 0x288 <__vector_18+0x48>
 286:	61 c0       	rjmp	.+194    	; 0x34a <__vector_18+0x10a>
		for (msgi = 0; msgi < tx_msgbuf.msgs[tx_msgbuf.read_pos].size; msgi++) {
 288:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <__data_end+0x1>
 28c:	8b e0       	ldi	r24, 0x0B	; 11
 28e:	e8 9f       	mul	r30, r24
 290:	f0 01       	movw	r30, r0
 292:	11 24       	eor	r1, r1
 294:	e4 5f       	subi	r30, 0xF4	; 244
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	84 81       	ldd	r24, Z+4	; 0x04
 29a:	88 23       	and	r24, r24
 29c:	f1 f0       	breq	.+60     	; 0x2da <__vector_18+0x9a>
 29e:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[tx_msgbuf.read_pos].msg[msgi];
 2a0:	ac e0       	ldi	r26, 0x0C	; 12
 2a2:	b1 e0       	ldi	r27, 0x01	; 1
 2a4:	9b e0       	ldi	r25, 0x0B	; 11
 2a6:	ca ef       	ldi	r28, 0xFA	; 250
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	11 96       	adiw	r26, 0x01	; 1
 2ac:	ec 91       	ld	r30, X
 2ae:	11 97       	sbiw	r26, 0x01	; 1
 2b0:	9e 9f       	mul	r25, r30
 2b2:	f0 01       	movw	r30, r0
 2b4:	11 24       	eor	r1, r1
 2b6:	e4 5f       	subi	r30, 0xF4	; 244
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	e8 0f       	add	r30, r24
 2bc:	f1 1d       	adc	r31, r1
 2be:	35 81       	ldd	r19, Z+5	; 0x05
 2c0:	38 83       	st	Y, r19
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		for (msgi = 0; msgi < tx_msgbuf.msgs[tx_msgbuf.read_pos].size; msgi++) {
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	11 96       	adiw	r26, 0x01	; 1
 2c6:	ec 91       	ld	r30, X
 2c8:	11 97       	sbiw	r26, 0x01	; 1
 2ca:	9e 9f       	mul	r25, r30
 2cc:	f0 01       	movw	r30, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	e4 5f       	subi	r30, 0xF4	; 244
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	34 81       	ldd	r19, Z+4	; 0x04
 2d6:	83 17       	cp	r24, r19
 2d8:	40 f3       	brcs	.-48     	; 0x2aa <__vector_18+0x6a>
		}
#if defined CAN_REV_2A
		CANIDT = _ID_TO_IDT_2A(tx_msgbuf.msgs[tx_msgbuf.read_pos].id);
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[tx_msgbuf.read_pos].size;
#elif defined CAN_REV_2B
		CANIDT = _ID_TO_IDT_2B(tx_msgbuf.msgs[tx_msgbuf.read_pos].id);
 2da:	ec e0       	ldi	r30, 0x0C	; 12
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	a1 81       	ldd	r26, Z+1	; 0x01
 2e0:	3b e0       	ldi	r19, 0x0B	; 11
 2e2:	3a 9f       	mul	r19, r26
 2e4:	d0 01       	movw	r26, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	a4 5f       	subi	r26, 0xF4	; 244
 2ea:	be 4f       	sbci	r27, 0xFE	; 254
 2ec:	12 96       	adiw	r26, 0x02	; 2
 2ee:	8d 91       	ld	r24, X+
 2f0:	9c 91       	ld	r25, X
 2f2:	13 97       	sbiw	r26, 0x03	; 3
 2f4:	a0 e0       	ldi	r26, 0x00	; 0
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	aa 1f       	adc	r26, r26
 2fe:	bb 1f       	adc	r27, r27
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 314:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 318:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 31c:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[tx_msgbuf.read_pos].size;
 320:	a1 81       	ldd	r26, Z+1	; 0x01
 322:	3a 9f       	mul	r19, r26
 324:	d0 01       	movw	r26, r0
 326:	11 24       	eor	r1, r1
 328:	a4 5f       	subi	r26, 0xF4	; 244
 32a:	be 4f       	sbci	r27, 0xFE	; 254
 32c:	14 96       	adiw	r26, 0x04	; 4
 32e:	8c 91       	ld	r24, X
 330:	80 65       	ori	r24, 0x50	; 80
 332:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (tx_msgbuf.read_pos < CAN_TX_MSGBUF_SIZE-1) {
 336:	81 81       	ldd	r24, Z+1	; 0x01
 338:	87 30       	cpi	r24, 0x07	; 7
 33a:	20 f4       	brcc	.+8      	; 0x344 <__vector_18+0x104>
			tx_msgbuf.read_pos++;
 33c:	81 81       	ldd	r24, Z+1	; 0x01
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	81 83       	std	Z+1, r24	; 0x01
 342:	61 c0       	rjmp	.+194    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		} else {
			tx_msgbuf.read_pos = 0;
 344:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 348:	5e c0       	rjmp	.+188    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 34a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_msgbuf+0x2>
 34e:	92 95       	swap	r25
 350:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 352:	90 31       	cpi	r25, 0x10	; 16
 354:	08 f4       	brcc	.+2      	; 0x358 <__vector_18+0x118>
 356:	57 c0       	rjmp	.+174    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			CANPAGE = cp;
 358:	80 e1       	ldi	r24, 0x10	; 16
 35a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 35e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 362:	85 fd       	sbrc	r24, 5
 364:	0b c0       	rjmp	.+22     	; 0x37c <__vector_18+0x13c>
 366:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 368:	cd ee       	ldi	r28, 0xED	; 237
 36a:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 36c:	ae ee       	ldi	r26, 0xEE	; 238
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	46 c0       	rjmp	.+140    	; 0x3fe <__vector_18+0x1be>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 372:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 374:	8c 91       	ld	r24, X
 376:	85 ff       	sbrs	r24, 5
 378:	42 c0       	rjmp	.+132    	; 0x3fe <__vector_18+0x1be>
 37a:	01 c0       	rjmp	.+2      	; 0x37e <__vector_18+0x13e>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 37c:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 37e:	a6 e6       	ldi	r26, 0x66	; 102
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	4d 91       	ld	r20, X+
 384:	5c 91       	ld	r21, X
 386:	11 97       	sbiw	r26, 0x01	; 1
 388:	e2 95       	swap	r30
 38a:	ef 70       	andi	r30, 0x0F	; 15
 38c:	e1 50       	subi	r30, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 2e       	mov	r0, r30
 394:	02 c0       	rjmp	.+4      	; 0x39a <__vector_18+0x15a>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <__vector_18+0x156>
 39e:	84 2b       	or	r24, r20
 3a0:	95 2b       	or	r25, r21
 3a2:	11 96       	adiw	r26, 0x01	; 1
 3a4:	9c 93       	st	X, r25
 3a6:	8e 93       	st	-X, r24
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
 3a8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 3ac:	8f 70       	andi	r24, 0x0F	; 15
 3ae:	6e 2f       	mov	r22, r30
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	9b e0       	ldi	r25, 0x0B	; 11
 3b4:	e9 9f       	mul	r30, r25
 3b6:	f0 01       	movw	r30, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	ea 59       	subi	r30, 0x9A	; 154
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 3c0:	85 81       	ldd	r24, Z+5	; 0x05
 3c2:	88 23       	and	r24, r24
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <__vector_18+0x1b2>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 3c8:	ca ef       	ldi	r28, 0xFA	; 250
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	9b e0       	ldi	r25, 0x0B	; 11
 3ce:	96 9f       	mul	r25, r22
 3d0:	a0 01       	movw	r20, r0
 3d2:	97 9f       	mul	r25, r23
 3d4:	50 0d       	add	r21, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	4a 59       	subi	r20, 0x9A	; 154
 3da:	5e 4f       	sbci	r21, 0xFE	; 254
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 3dc:	da 01       	movw	r26, r20
 3de:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 3e0:	98 81       	ld	r25, Y
 3e2:	fa 01       	movw	r30, r20
 3e4:	e8 0f       	add	r30, r24
 3e6:	f1 1d       	adc	r31, r1
 3e8:	96 83       	std	Z+6, r25	; 0x06
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].size; msgi++) {
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	9c 91       	ld	r25, X
 3ee:	89 17       	cp	r24, r25
 3f0:	b8 f3       	brcs	.-18     	; 0x3e0 <__vector_18+0x1a0>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 3f2:	ef ee       	ldi	r30, 0xEF	; 239
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	80 83       	st	Z, r24
				break;
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 3fe:	e0 5f       	subi	r30, 0xF0	; 240
 400:	9e 17       	cp	r25, r30
 402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	b6 cf       	rjmp	.-148    	; 0x372 <__vector_18+0x132>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 406:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 40a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0b be       	out	0x3b, r0	; 59
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <can_test_tx>:
	uint16_t id;
	uint8_t dat[8];
	uint8_t len;
	
	while(1) {
		while(can_message_available()) {
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	2c 97       	sbiw	r28, 0x0c	; 12
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	41 de       	rcall	.-894    	; 0xd0 <can_init>
 44e:	78 94       	sei
 450:	8c e0       	ldi	r24, 0x0C	; 12
 452:	e0 e0       	ldi	r30, 0x00	; 0
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	de 01       	movw	r26, r28
 458:	11 96       	adiw	r26, 0x01	; 1
 45a:	01 90       	ld	r0, Z+
 45c:	0d 92       	st	X+, r0
 45e:	8a 95       	dec	r24
 460:	e1 f7       	brne	.-8      	; 0x45a <can_test_tx+0x22>
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	87 b9       	out	0x07, r24	; 7
 466:	00 e0       	ldi	r16, 0x00	; 0
 468:	11 e0       	ldi	r17, 0x01	; 1
 46a:	f1 2c       	mov	r15, r1
 46c:	19 83       	std	Y+1, r17	; 0x01
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	be 01       	movw	r22, r28
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	72 de       	rcall	.-796    	; 0x160 <can_transmit>
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	9f e4       	ldi	r25, 0x4F	; 79
 480:	a2 e1       	ldi	r26, 0x12	; 18
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	a1 09       	sbc	r26, r1
 488:	b1 09       	sbc	r27, r1
 48a:	e1 f7       	brne	.-8      	; 0x484 <can_test_tx+0x4c>
 48c:	10 38       	cpi	r17, 0x80	; 128
 48e:	29 f0       	breq	.+10     	; 0x49a <can_test_tx+0x62>
 490:	11 30       	cpi	r17, 0x01	; 1
 492:	31 f0       	breq	.+12     	; 0x4a0 <can_test_tx+0x68>
 494:	00 23       	and	r16, r16
 496:	21 f0       	breq	.+8      	; 0x4a0 <can_test_tx+0x68>
 498:	01 c0       	rjmp	.+2      	; 0x49c <can_test_tx+0x64>
 49a:	01 e0       	ldi	r16, 0x01	; 1
 49c:	16 95       	lsr	r17
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <can_test_tx+0x6c>
 4a0:	11 0f       	add	r17, r17
 4a2:	0f 2d       	mov	r16, r15
 4a4:	18 b9       	out	0x08, r17	; 8
 4a6:	e2 cf       	rjmp	.-60     	; 0x46c <can_test_tx+0x34>

000004a8 <main>:
	
	return 0;
}

int main(void) {
    can_test_tx();
 4a8:	c7 df       	rcall	.-114    	; 0x438 <can_test_tx>

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
