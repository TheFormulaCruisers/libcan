
libcan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  0080010c  0080010c  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d5  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  000028dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ce  00000000  00000000  000030d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c1       	rjmp	.+538    	; 0x264 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e8       	ldi	r30, 0x82	; 130
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 30       	cpi	r26, 0x0C	; 12
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ac e0       	ldi	r26, 0x0C	; 12
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 3f       	cpi	r26, 0xF3	; 243
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	d8 d1       	rcall	.+944    	; 0x47c <main>
  cc:	d8 c1       	rjmp	.+944    	; 0x47e <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
			} while (rx_msgbuf.rx_flags & flag_msk);
			break;
		}
		flag_msk <<= 1;
	}
}
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  e2:	22 e0       	ldi	r18, 0x02	; 2
  e4:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
  e8:	24 e0       	ldi	r18, 0x04	; 4
  ea:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
  ee:	23 e1       	ldi	r18, 0x13	; 19
  f0:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	3f e7       	ldi	r19, 0x7F	; 127
  f8:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  fc:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 100:	20 eb       	ldi	r18, 0xB0	; 176
 102:	20 93 db 00 	sts	0x00DB, r18	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 106:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 10a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 10e:	48 ef       	ldi	r20, 0xF8	; 248
 110:	5f ef       	ldi	r21, 0xFF	; 255
 112:	6f ef       	ldi	r22, 0xFF	; 255
 114:	7f ef       	ldi	r23, 0xFF	; 255
 116:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 11a:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 11e:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 122:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 146:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 14a:	a0 93 f2 00 	sts	0x00F2, r26	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 14e:	b0 93 f3 00 	sts	0x00F3, r27	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 158:	0d ee       	ldi	r16, 0xED	; 237
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	2e ee       	ldi	r18, 0xEE	; 238
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	c4 ef       	ldi	r28, 0xF4	; 244
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	a0 ef       	ldi	r26, 0xF0	; 240
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	0f 2e       	mov	r0, r31
 16a:	ff ee       	ldi	r31, 0xEF	; 239
 16c:	ef 2e       	mov	r14, r31
 16e:	f1 2c       	mov	r15, r1
 170:	f0 2d       	mov	r31, r0
 172:	f8 01       	movw	r30, r16
 174:	80 83       	st	Z, r24
 176:	f9 01       	movw	r30, r18
 178:	10 82       	st	Z, r1
 17a:	48 83       	st	Y, r20
 17c:	59 83       	std	Y+1, r21	; 0x01
 17e:	6a 83       	std	Y+2, r22	; 0x02
 180:	7b 83       	std	Y+3, r23	; 0x03
 182:	1d 92       	st	X+, r1
 184:	1d 92       	st	X+, r1
 186:	1d 92       	st	X+, r1
 188:	1c 92       	st	X, r1
 18a:	13 97       	sbiw	r26, 0x03	; 3
 18c:	f7 01       	movw	r30, r14
 18e:	10 82       	st	Z, r1
 190:	80 5f       	subi	r24, 0xF0	; 240
 192:	80 3f       	cpi	r24, 0xF0	; 240
 194:	71 f7       	brne	.-36     	; 0x172 <can_init+0xa2>
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret

000001aa <can_transmit>:

void can_transmit(uint8_t *msg, uint8_t msg_size) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	const uint8_t cp_tmp = CANPAGE;
 1ae:	ed ee       	ldi	r30, 0xED	; 237
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	70 81       	ld	r23, Z
	uint8_t msgi;

	CANPAGE = 0x00;
 1b4:	10 82       	st	Z, r1
	
	// Write to mob if it's not busy and start transmission
	if (!(CANEN2 & _BV(ENMOB0))) {
 1b6:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 1ba:	20 fd       	sbrc	r18, 0
 1bc:	16 c0       	rjmp	.+44     	; 0x1ea <can_transmit+0x40>
		for (msgi = 0; msgi < msg_size; msgi++) {
 1be:	66 23       	and	r22, r22
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <can_transmit+0x38>
 1c2:	fc 01       	movw	r30, r24
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	26 0f       	add	r18, r22
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	dc 01       	movw	r26, r24
 1d0:	a2 0f       	add	r26, r18
 1d2:	b3 1f       	adc	r27, r19
			CANMSG = *(msg+msgi);
 1d4:	ca ef       	ldi	r28, 0xFA	; 250
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	91 91       	ld	r25, Z+
 1da:	98 83       	st	Y, r25

	CANPAGE = 0x00;
	
	// Write to mob if it's not busy and start transmission
	if (!(CANEN2 & _BV(ENMOB0))) {
		for (msgi = 0; msgi < msg_size; msgi++) {
 1dc:	ae 17       	cp	r26, r30
 1de:	bf 07       	cpc	r27, r31
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <can_transmit+0x2e>
			CANMSG = *(msg+msgi);
		}
#if defined CAN_REV_2A
		CANCDMOB = _BV(CONMOB0) | msg_size;
#elif defined CAN_REV_2B
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | msg_size;
 1e2:	60 65       	ori	r22, 0x50	; 80
 1e4:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1e8:	38 c0       	rjmp	.+112    	; 0x25a <can_transmit+0xb0>
#endif

	// Write to tx message buffer otherwise
	} else {
		tx_msgbuf.msgs[tx_msgbuf.write_pos].msg_size = msg_size;
 1ea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	2e 0f       	add	r18, r30
 200:	3f 1f       	adc	r19, r31
 202:	f9 01       	movw	r30, r18
 204:	e4 5f       	subi	r30, 0xF4	; 244
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	62 83       	std	Z+2, r22	; 0x02
		for (msgi = 0; msgi < msg_size; msgi++) {
 20a:	66 23       	and	r22, r22
 20c:	d1 f0       	breq	.+52     	; 0x242 <can_transmit+0x98>
 20e:	dc 01       	movw	r26, r24
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
			tx_msgbuf.msgs[tx_msgbuf.write_pos].msg[msgi] = *(msg+msgi);
 214:	cc e0       	ldi	r28, 0x0C	; 12
 216:	d1 e0       	ldi	r29, 0x01	; 1
 218:	28 81       	ld	r18, Y
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	8d 91       	ld	r24, X+
 21e:	f9 01       	movw	r30, r18
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e2 0f       	add	r30, r18
 22e:	f3 1f       	adc	r31, r19
 230:	e4 5f       	subi	r30, 0xF4	; 244
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	e4 0f       	add	r30, r20
 236:	f5 1f       	adc	r31, r21
 238:	83 83       	std	Z+3, r24	; 0x03
 23a:	4f 5f       	subi	r20, 0xFF	; 255
 23c:	5f 4f       	sbci	r21, 0xFF	; 255
#endif

	// Write to tx message buffer otherwise
	} else {
		tx_msgbuf.msgs[tx_msgbuf.write_pos].msg_size = msg_size;
		for (msgi = 0; msgi < msg_size; msgi++) {
 23e:	46 17       	cp	r20, r22
 240:	58 f3       	brcs	.-42     	; 0x218 <can_transmit+0x6e>
			tx_msgbuf.msgs[tx_msgbuf.write_pos].msg[msgi] = *(msg+msgi);
		}
		if (tx_msgbuf.write_pos < CAN_TX_MSGBUF_SIZE-1) {
 242:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 246:	87 30       	cpi	r24, 0x07	; 7
 248:	30 f4       	brcc	.+12     	; 0x256 <can_transmit+0xac>
			tx_msgbuf.write_pos++;
 24a:	ec e0       	ldi	r30, 0x0C	; 12
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	80 81       	ld	r24, Z
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 83       	st	Z, r24
 254:	02 c0       	rjmp	.+4      	; 0x25a <can_transmit+0xb0>
		} else {
			tx_msgbuf.write_pos = 0;
 256:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
	
	CANPAGE = cp_tmp;
 25a:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <__vector_18>:

// ------------------------------------------------- Interrupt Service Routines

ISR(CANIT_vect) {
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	0b b6       	in	r0, 0x3b	; 59
 270:	0f 92       	push	r0
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	const uint8_t cp_tmp = CANPAGE;
 28c:	ed ee       	ldi	r30, 0xED	; 237
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	40 81       	ld	r20, Z
	uint8_t bufi, cp_max, cp, msgi;

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
 292:	10 82       	st	Z, r1
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
 294:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 298:	86 ff       	sbrs	r24, 6
 29a:	43 c0       	rjmp	.+134    	; 0x322 <__vector_18+0xbe>
 29c:	ec e0       	ldi	r30, 0x0C	; 12
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	91 81       	ldd	r25, Z+1	; 0x01
 2a2:	80 81       	ld	r24, Z
 2a4:	98 17       	cp	r25, r24
 2a6:	e9 f1       	breq	.+122    	; 0x322 <__vector_18+0xbe>
		bufi = tx_msgbuf.read_pos;
 2a8:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <__data_end+0x1>
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	fb 01       	movw	r30, r22
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e6 0f       	add	r30, r22
 2be:	f7 1f       	adc	r31, r23
 2c0:	e4 5f       	subi	r30, 0xF4	; 244
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	82 81       	ldd	r24, Z+2	; 0x02
 2c6:	88 23       	and	r24, r24
 2c8:	79 f0       	breq	.+30     	; 0x2e8 <__vector_18+0x84>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 2cc:	9f 01       	movw	r18, r30
 2ce:	ca ef       	ldi	r28, 0xFA	; 250
 2d0:	d0 e0       	ldi	r29, 0x00	; 0

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 2d2:	df 01       	movw	r26, r30
 2d4:	12 96       	adiw	r26, 0x02	; 2
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
 2d6:	f9 01       	movw	r30, r18
 2d8:	e8 0f       	add	r30, r24
 2da:	f1 1d       	adc	r31, r1
 2dc:	93 81       	ldd	r25, Z+3	; 0x03
 2de:	98 83       	st	Y, r25

	// On transmission OK, look for new message in tx buffer and transmit
	CANPAGE = 0x00;
	if (CANSTMOB & _BV(TXOK) && tx_msgbuf.read_pos != tx_msgbuf.write_pos) {
		bufi = tx_msgbuf.read_pos;
		for (msgi = 0; msgi < tx_msgbuf.msgs[bufi].msg_size; msgi++) {
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	9c 91       	ld	r25, X
 2e4:	89 17       	cp	r24, r25
 2e6:	b8 f3       	brcs	.-18     	; 0x2d6 <__vector_18+0x72>
			CANMSG = tx_msgbuf.msgs[bufi].msg[msgi];
		}
#if defined CAN_REV_2A
		CANCDMOB = _BV(CONMOB0) | tx_msgbuf.msgs[bufi].msg_size;
#elif defined CAN_REV_2B
		CANCDMOB = _BV(CONMOB0) | _BV(IDE) | tx_msgbuf.msgs[bufi].msg_size;
 2e8:	fb 01       	movw	r30, r22
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	ee 0f       	add	r30, r30
 2f0:	ff 1f       	adc	r31, r31
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	6e 0f       	add	r22, r30
 2f8:	7f 1f       	adc	r23, r31
 2fa:	fb 01       	movw	r30, r22
 2fc:	e4 5f       	subi	r30, 0xF4	; 244
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	82 81       	ldd	r24, Z+2	; 0x02
 302:	80 65       	ori	r24, 0x50	; 80
 304:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
#endif
		if (tx_msgbuf.read_pos < CAN_TX_MSGBUF_SIZE-1) {
 308:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__data_end+0x1>
 30c:	87 30       	cpi	r24, 0x07	; 7
 30e:	30 f4       	brcc	.+12     	; 0x31c <__vector_18+0xb8>
			tx_msgbuf.read_pos++;
 310:	ec e0       	ldi	r30, 0x0C	; 12
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	81 81       	ldd	r24, Z+1	; 0x01
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	81 83       	std	Z+1, r24	; 0x01
 31a:	61 c0       	rjmp	.+194    	; 0x3de <__vector_18+0x17a>
		} else {
			tx_msgbuf.read_pos = 0;
 31c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 320:	5e c0       	rjmp	.+188    	; 0x3de <__vector_18+0x17a>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
 322:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <rx_msgbuf+0x2>
 326:	92 95       	swap	r25
 328:	90 7f       	andi	r25, 0xF0	; 240
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 32a:	90 31       	cpi	r25, 0x10	; 16
 32c:	08 f4       	brcc	.+2      	; 0x330 <__vector_18+0xcc>
 32e:	57 c0       	rjmp	.+174    	; 0x3de <__vector_18+0x17a>
			CANPAGE = cp;
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 336:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 33a:	85 fd       	sbrc	r24, 5
 33c:	0b c0       	rjmp	.+22     	; 0x354 <__vector_18+0xf0>
 33e:	e0 e1       	ldi	r30, 0x10	; 16

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 340:	cd ee       	ldi	r28, 0xED	; 237
 342:	d0 e0       	ldi	r29, 0x00	; 0
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 344:	ae ee       	ldi	r26, 0xEE	; 238
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	46 c0       	rjmp	.+140    	; 0x3d6 <__vector_18+0x172>

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
			CANPAGE = cp;
 34a:	e8 83       	st	Y, r30
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
 34c:	8c 91       	ld	r24, X
 34e:	85 ff       	sbrs	r24, 5
 350:	42 c0       	rjmp	.+132    	; 0x3d6 <__vector_18+0x172>
 352:	01 c0       	rjmp	.+2      	; 0x356 <__vector_18+0xf2>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 354:	e0 e1       	ldi	r30, 0x10	; 16
			CANPAGE = cp;
			
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
 356:	a6 e5       	ldi	r26, 0x56	; 86
 358:	b1 e0       	ldi	r27, 0x01	; 1
 35a:	2d 91       	ld	r18, X+
 35c:	3c 91       	ld	r19, X
 35e:	11 97       	sbiw	r26, 0x01	; 1
 360:	e2 95       	swap	r30
 362:	ef 70       	andi	r30, 0x0F	; 15
 364:	e1 50       	subi	r30, 0x01	; 1
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 2e       	mov	r0, r30
 36c:	02 c0       	rjmp	.+4      	; 0x372 <__vector_18+0x10e>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <__vector_18+0x10a>
 376:	82 2b       	or	r24, r18
 378:	93 2b       	or	r25, r19
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	9c 93       	st	X, r25
 37e:	8e 93       	st	-X, r24
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
 380:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 384:	8f 70       	andi	r24, 0x0F	; 15
 386:	6e 2f       	mov	r22, r30
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	9b e0       	ldi	r25, 0x0B	; 11
 38c:	e9 9f       	mul	r30, r25
 38e:	f0 01       	movw	r30, r0
 390:	11 24       	eor	r1, r1
 392:	ea 5a       	subi	r30, 0xAA	; 170
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	85 83       	std	Z+5, r24	; 0x05
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 398:	85 81       	ldd	r24, Z+5	; 0x05
 39a:	88 23       	and	r24, r24
 39c:	b1 f0       	breq	.+44     	; 0x3ca <__vector_18+0x166>
 39e:	80 e0       	ldi	r24, 0x00	; 0
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 3a0:	ca ef       	ldi	r28, 0xFA	; 250
 3a2:	d0 e0       	ldi	r29, 0x00	; 0
 3a4:	9b e0       	ldi	r25, 0x0B	; 11
 3a6:	96 9f       	mul	r25, r22
 3a8:	90 01       	movw	r18, r0
 3aa:	97 9f       	mul	r25, r23
 3ac:	30 0d       	add	r19, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2a 5a       	subi	r18, 0xAA	; 170
 3b2:	3e 4f       	sbci	r19, 0xFE	; 254
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 3b4:	d9 01       	movw	r26, r18
 3b6:	15 96       	adiw	r26, 0x05	; 5
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
 3b8:	98 81       	ld	r25, Y
 3ba:	f9 01       	movw	r30, r18
 3bc:	e8 0f       	add	r30, r24
 3be:	f1 1d       	adc	r31, r1
 3c0:	96 83       	std	Z+6, r25	; 0x06
			// On set rx flag, copy message to buffer and re-enable reception
			if (CANSTMOB & _BV(RXOK)) {
				bufi = (cp >> 4) - 1;
				rx_msgbuf.rx_flags |= 1 << bufi;
				rx_msgbuf.msgs[bufi].msg_size = CANCDMOB & 0x0F;
				for (msgi = 0; msgi < rx_msgbuf.msgs[bufi].msg_size; msgi++) {
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	9c 91       	ld	r25, X
 3c6:	89 17       	cp	r24, r25
 3c8:	b8 f3       	brcs	.-18     	; 0x3b8 <__vector_18+0x154>
					rx_msgbuf.msgs[bufi].msg[msgi] = CANMSG;
				}
				CANCDMOB |= _BV(CONMOB1);
 3ca:	ef ee       	ldi	r30, 0xEF	; 239
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	80 83       	st	Z, r24
				break;
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <__vector_18+0x17a>
		}

	// Otherwise, find which other mob causes the interrupt
	} else {
		cp_max = rx_msgbuf.msgs_size << 4;
		for (cp = 0x10; cp <= cp_max; cp += 0x10) {
 3d6:	e0 5f       	subi	r30, 0xF0	; 240
 3d8:	9e 17       	cp	r25, r30
 3da:	08 f0       	brcs	.+2      	; 0x3de <__vector_18+0x17a>
 3dc:	b6 cf       	rjmp	.-148    	; 0x34a <__vector_18+0xe6>
				break;
			}
		}
	}

	CANSTMOB = 0x00;
 3de:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = cp_tmp;
 3e2:	40 93 ed 00 	sts	0x00ED, r20	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0b be       	out	0x3b, r0	; 59
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <can_test_tx>:
	uint16_t id;
	uint8_t dat[8];
	uint8_t len;
	
	while(1) {
		while(can_message_available()) {
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	2c 97       	sbiw	r28, 0x0c	; 12
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	54 de       	rcall	.-856    	; 0xd0 <can_init>
 428:	78 94       	sei
 42a:	8c e0       	ldi	r24, 0x0C	; 12
 42c:	e0 e0       	ldi	r30, 0x00	; 0
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	de 01       	movw	r26, r28
 432:	11 96       	adiw	r26, 0x01	; 1
 434:	01 90       	ld	r0, Z+
 436:	0d 92       	st	X+, r0
 438:	8a 95       	dec	r24
 43a:	e1 f7       	brne	.-8      	; 0x434 <can_test_tx+0x26>
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	87 b9       	out	0x07, r24	; 7
 440:	00 e0       	ldi	r16, 0x00	; 0
 442:	11 e0       	ldi	r17, 0x01	; 1
 444:	f1 2c       	mov	r15, r1
 446:	19 83       	std	Y+1, r17	; 0x01
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	ce 01       	movw	r24, r28
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	ad de       	rcall	.-678    	; 0x1aa <can_transmit>
 450:	80 ea       	ldi	r24, 0xA0	; 160
 452:	96 e8       	ldi	r25, 0x86	; 134
 454:	a1 e0       	ldi	r26, 0x01	; 1
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	a1 09       	sbc	r26, r1
 45c:	b1 09       	sbc	r27, r1
 45e:	e1 f7       	brne	.-8      	; 0x458 <can_test_tx+0x4a>
 460:	10 38       	cpi	r17, 0x80	; 128
 462:	29 f0       	breq	.+10     	; 0x46e <can_test_tx+0x60>
 464:	11 30       	cpi	r17, 0x01	; 1
 466:	31 f0       	breq	.+12     	; 0x474 <can_test_tx+0x66>
 468:	00 23       	and	r16, r16
 46a:	21 f0       	breq	.+8      	; 0x474 <can_test_tx+0x66>
 46c:	01 c0       	rjmp	.+2      	; 0x470 <can_test_tx+0x62>
 46e:	01 e0       	ldi	r16, 0x01	; 1
 470:	16 95       	lsr	r17
 472:	02 c0       	rjmp	.+4      	; 0x478 <can_test_tx+0x6a>
 474:	11 0f       	add	r17, r17
 476:	0f 2d       	mov	r16, r15
 478:	18 b9       	out	0x08, r17	; 8
 47a:	e5 cf       	rjmp	.-54     	; 0x446 <can_test_tx+0x38>

0000047c <main>:
	
	return 0;
}

int main(void) {
    can_test_tx();
 47c:	c8 df       	rcall	.-112    	; 0x40e <can_test_tx>

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
